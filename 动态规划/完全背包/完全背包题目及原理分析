区别于0-1背包问题, 完全背包问题的唯一区别是 每件物品能无限次使用


结论：
     1. 0-1背包:  f[i][j] = max(f[i - 1][j], f[i - 1][j - v] + w)  
     2. 完全背包: f[i][j] = max(f[i - 1][j], f[i][j - v] + w)     
    
     1. 0-1背包(优化):  f[j] = max(f[j], f[j - v[i]] + w[i])  -> j 从大到小枚举
     2. 完全背包(优化): f[j] = max(f[j], f[j - v[i]] + w[i])  -> j 从小到大枚举

原理分析:
     1.因为0-1背包问题中物品只可以选择一次,所以  
       f[i][j] = max(f[i-1][j], f[i-1][j-v] + w)

     2.因为完全背包问题中物品可以无限次选用,所以 
       f[i][j] = max(f[i-1][j], f[i-1][j-v] + w, f[i-1][j-2v] + 2w, ... , f[i-1][j-kv] + kw)  (1)
       将上式中的 j 替换为 j-v 得
       f[i][j-v] = max(f[i-1][j-v], f[i-1][j-2v] + w, f[i-1][j-3v] + 2w, ... )                (2)
       可知
       f[i][j] = max(f[i-1][j], f[i][j - v] + w) 

     3.优化后即可得出
       完全背包(优化): f[j] = max(f[j], f[j - v[i]] + w[i])  -> j 从小到大枚举
       